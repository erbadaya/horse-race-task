var jsPsychAudioSurveyInputResponse = (function (jspsych) {
  'use strict';

  const info = {
      name: "audio-survey-input-response",
      parameters: {
          /** The audio file to be played. */
          stimulus: {
              type: jspsych.ParameterType.AUDIO,
              pretty_name: "Stimulus",
              default: undefined,
          },
          /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */
        //   choices: {
        //       type: jspsych.ParameterType.KEYS,
        //       pretty_name: "Choices",
        //       default: "ALL_KEYS",
        //   }, *COMMENTIN IT OUT BECAUSE WE DONT NEED THIS*
          /** Any content here will be displayed below the stimulus. */
          /** This used to be prompt but we've changed it */
          preamble: {
              type: jspsych.ParameterType.HTML_STRING,
              pretty_name: "Preamble",
              default: null,
          },
          /** HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. */
          html: {
            type: jspsych.ParameterType.HTML_STRING,
            pretty_name: "HTML",
            default: null,
        },
          /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */
          response_allowed_while_playing: {
              type: jspsych.ParameterType.BOOL,
              pretty_name: "Response allowed while playing",
              default: true,
          },
          /** The text that appears on the button to finish the trial. */
          button_label: {
              type: jspsych.ParameterType.HTML_STRING,
              pretty_name: "Button HTML",
              default: '<button class="jspsych-btn"> Continue </button>',
              array: true
          },
          /** If true, then the trial will end as soon as the audio file finishes playing. */
          trial_ends_after_audio: {
            type: jspsych.ParameterType.BOOL,
            pretty_name: "Trial ends after audio",
            default: false,
        },
      },
      
  };
  /**
   * **audio-survey-input-response**
   *
   * jsPsych plugin for playing an audio file and getting user input via an HTML form
   * A combination of the AudioKeyboardResponse and SurveyHtmlForm
   *
   * @author Josh de Leeuw
   * @see {@link https://www.jspsych.org/plugins/jspsych-audio-keyboard-response/ audio-keyboard-response plugin documentation on jspsych.org}
   * The new elements that we have added are the button and DataAsArray
   * We have changed prompt to preamble
   */
    
  class AudioSurveyInputResponsePlugin {
      constructor(jsPsych) {
          this.jsPsych = jsPsych;
      }
      trial(display_element, trial, on_load) {
        // hold the .resolve() function from the Promise that ends the trial
          let trial_complete;
          // setup stimulus
          var context = this.jsPsych.pluginAPI.audioContext();
          // record webaudio context start time
          var startTime;
          // load audio file
          this.jsPsych.pluginAPI
              .getAudioBuffer(trial.stimulus)
              .then((buffer) => {
              if (context !== null) {
                  this.audio = context.createBufferSource();
                  this.audio.buffer = buffer;
                  this.audio.connect(context.destination);
              }
              else {
                  this.audio = buffer;
                  this.audio.currentTime = 0;
              }
              setupTrial();
          })
              .catch((err) => {
              console.error(`Failed to load audio file "${trial.stimulus}". Try checking the file path. We recommend using the preload plugin to load audio files.`);
              console.error(err);
          });
        const setupTrial = () => {
            // set up end event if trial needs it
            if (trial.trial_ends_after_audio) {
                this.audio.addEventListener("ended", end_trial);
            }
            // enable buttons after audio ends if necessary
            if (!trial.response_allowed_while_playing && !trial.trial_ends_after_audio) {
                this.audio.addEventListener("ended", enable_buttons);
            }
            var html = "";
            var buttons = trial.button_label
            // show text for user imput
            if (trial.preamble !== null) {
                html +='<div id="jspsych-audio-survey-input-response-preamble" class="jspsych-survey-html-form-preamble">' +trial.preamble + "</div>";
            }
            html += '<form id="jspsych-survey-html-form" autocomplete="off">';
            // add form HTML / input elements
            html += trial.html;
            html += "</form>";
            // add submit button
            html +='<div class="jspsych-audio-button-response-button">' + trial.button_label +'</div>';
            
            display_element.innerHTML = html;
            if (trial.response_allowed_while_playing) {
                enable_buttons();
            }
            else {
                disable_buttons();
            }
              // start audio
            if (context !== null) {
                  startTime = context.currentTime;
                  this.audio.start(startTime);
            }
            else {
                  this.audio.play();
            }
           // end trial if time limit is set
           if (trial.trial_duration !== null) {
            this.jsPsych.pluginAPI.setTimeout(() => {
                end_trial();
            }, trial.trial_duration);
        }
        on_load();
        };
        const end_trial = () => {
             // kill any remaining setTimeout handlers
             this.jsPsych.pluginAPI.clearAllTimeouts();
             // stop the audio file if it is playing
             this.audio.removeEventListener("ended", end_trial);
             this.audio.removeEventListener("ended", enable_buttons);
            display_element  
                .querySelector("#jspsych-survey-html-form")
                .addEventListener("submit", (event) => {
                    // don't submit form
                    event.preventDefault();
                    // measure response time
                    var endTime = performance.now();
                    var response_time = Math.round(endTime - startTime);
                    var this_form = display_element.querySelector("#jspsych-survey-html-form");
                    var question_data = serializeArray(this_form);
                    if (!trial.dataAsArray) {
                        question_data = objectifyForm(question_data);
                    }
                    // save data
                    var response = {
                        rt: response_time,
                        response: question_data,
                        button: null
                    };
                    display_element.innerHTML = "";
                    // next trial
                    this.jsPsych.finishTrial(trialdata);
                    trial_complete()
                    });
      };
      function after_response(choice) {
        // measure rt
        var endTime = performance.now();
        var rt = Math.round(endTime - startTime);
        if (context !== null) {
            endTime = context.currentTime;
            rt = Math.round((endTime - startTime) * 1000);
        }
        response.button = parseInt(choice);
        response.rt = rt;
        // disable all the buttons after a response
        disable_buttons();
        if (trial.response_ends_trial) {
            end_trial();
        }
    }
      function button_response(e) {
        var choice = e.currentTarget.getAttribute("data-choice"); // don't use dataset for jsdom compatibility
        after_response(choice);
        }
      function disable_buttons() {
        var btns = document.querySelectorAll(".jspsych-audio-button-response-button");
        for (var i = 0; i < btns.length; i++) {
            var btn_el = btns[i].querySelector("button");
            if (btn_el) {
                btn_el.disabled = true;
            }
            btns[i].removeEventListener("click", button_response);
        }
        }
        function enable_buttons() {
            var btns = document.querySelectorAll(".jspsych-audio-button-response-button");
            for (var i = 0; i < btns.length; i++) {
                var btn_el = btns[i].querySelector("button");
                if (btn_el) {
                    btn_el.disabled = false;
                }
                btns[i].addEventListener("click", button_response);
            }
        }
      function serializeArray(form) {
        // Setup our serialized data
        var serialized = [];
        // Loop through each field in the form
        for (var i = 0; i < form.elements.length; i++) {
            var field = form.elements[i];
            // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields
            if (!field.name ||
                field.disabled ||
                field.type === "file" ||
                field.type === "reset" ||
                field.type === "submit" ||
                field.type === "button")
                continue;
            // If a multi-select, get all selections
            if (field.type === "select-multiple") {
                for (var n = 0; n < field.options.length; n++) {
                    if (!field.options[n].selected)
                        continue;
                    serialized.push({
                        name: field.name,
                        value: field.options[n].value,
                    });
                }
            }
            // Convert field data to a query string
            else if ((field.type !== "checkbox" && field.type !== "radio") || field.checked) {
                serialized.push({
                    name: field.name,
                    value: field.value,
                });
            }
        }
        return serialized;
    }
    function objectifyForm(formArray) {
        //serialize data function
        var returnArray = {};
        for (var i = 0; i < formArray.length; i++) {
            returnArray[formArray[i]["name"]] = formArray[i]["value"];
        }
        return returnArray;
    }
    // function to handle responses by the subject
    function after_response(info) {
        // only record the first response
        if (response.key == null) {
            response = info;
        }
        if (trial.response_ends_trial) {
            end_trial();
        }
    }
    return new Promise((resolve) => {
        trial_complete = resolve;
    });
    }
    }
  AudioSurveyInputResponsePlugin.info = info;

  return AudioSurveyInputResponsePlugin;
  
})(jsPsychModule);
